@startuml semaine4

package pouvoir {
    abstract class Pouvoir{
        -m_nom: String
        -m_desc: String
        -m_unique: Boolean
        -m_offencif: Boolean
        #«create»Pouvoir(nom: String, desc: String, unique: Boolean, offencif: Boolean)
        +{abstract} utiliser(Poke: Pokemoon, other: Pokemoon, joeur: Player):
        +getNom(): String
        +getDesc(): String
        +getUnique(): Boolean
        +getOffencif(): Boolean
        +toString(): String
    }
}


package partie{
    package affichage{
        class Affichage{
            -{static}m_titre: String
            -{static}m_separation: String
            +{static}dodo():
            +{static}clearScreen():
            +{static}continuer():
            -{static}getTitre()
            -{static}getDeck(player: Player): String
            -{static}getDiscard(player: Player): String
            -{static}getHand(player: Player): String
            ~{static}getPlayground(player1: Player, player2: Player): String
            +{static}afficherJeu(p1: Player, p2: Player):
            +{static}afficherFinJeu(p: Player):
        }
    }

    class FindPoke implements GetPoke{
        -getPokeJoueur(offencif: boolean): Pokemoon
        -getPokeBot(offencif: boolean): Pokemoon
        +find(offencif: boolean): Pokemoon
    }

    class Deroulement{
        -m_gameOver: Boolean
        +«create»createPlayer(): 
        +getIndexValide(size: Integer): Integer
        +getIndexValideSansRep(size: Integer, indexUser: Boolean[]): Integer
        +userFillPlayground(nbPoke: Integer): 
        +botFillPlayground(nbPoke: Integer): 
        +restePouv(p: Player, pouv_utiliser: Boolean[]): Boolean
        +usePouvJoueur(): 
        +userAttack(): Integer
        +botAttack(): Integer
        +gameOver(): Player
        +getGameOver(): Boolean
        +playerIsFirst(): Boolean
        +gameEnd(): 
    }

    class PouvUsurpation extends pouvoir.Pouvoir {
        +<<create>>PouvUsurpation()
        +getPokemoon(joueur: Player, other: Player): Pokemoon
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }
}


package player{
    class Deck{
        ~«create»Deck(deckSize: Integer)
        ~takePokemoon(): Pokemoon
        ~isEmpty(): boolean
        ~getSize(): Integer
        +toString(): String
    }

    class Discard{
       ~«create»Discard()
       ~addPokemoon(poke: Pokemoon): 
       ~getSize(): Integer
       +toString(): String
    }

    class FindPoke implements GetPoke{
        +«create»FindPoke(p: Player)
        +getPoke(question: String): Pokemoon
    }

    class Hand{
       ~«create»Hand()
       ~addPokemoon(poke: Pokemoon): 
       ~getPokemoonByIndex(index: Integer): Pokemoon
       ~getPokemoonByName(nomPoke: String): Pokemoon
       ~getSize(): Integer
       +toString(): String
    }

    class Player{
       -m_nom: String
       -m_firstPlayer: boolean
       +«create»Player(nom: String, firstPlayer: boolean)
       +fillHand(): void
       +choosePoke(index: Integer)
       +cleanPlayground(): Integer
       +autoAttack(other: Player, indexPoke: Integer): String
       +usePouv(poke: Integer, GetPoke cherche):
       +hasPower(poke: Integer): Boolean
       +getHand(): String
       +getHandSize(): Integer
       +getPlayground(): String
       +getPlaygroundSize(): Integer
       +getDeckSize(): Integer
       +getDiscardSize(): Integer
       +getPlayerName(): String
       +getNbPoke(): Integer
       +getFirstPlayer(): boolean
       +toString(): String
    }

    class Playground{
        ~«create»Playground()
        ~addPokemoon(pokemoon: Pokemoon): 
        ~getPokemoonByIndex(index: Integer): Pokemoon
        ~getPokemoonByName(nomPoke: String): Pokemoon
        ~tcheck(): Pokemoon[0..3]
        ~getSize(): Integer
        +toString(): String
    }

    class PouvSoinZone extends pouvoir.Pouvoir {
        +<<create>>PouvSoinZone()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class User extends Player{
        +<<create>>User(nom: String)
        +userAttack(other: Player, myPokeIndex: Integer, otherPokeIndex: Integer): String
    }
}

package pokemoon{
    enum Element{
        -m_type: String
        -m_avantage: String
        -m_desavantage: String
        EAU
        TERRE
        FEU
        AIR
        ETHER
        PLOMB
        -«create»Element(type: String, avantage: String, desavantage: String)
        +toString(): String
        ~getAvantage(): String
        ~getDesavantage(): String
    }

    interface GetPoke{
        +find(offencif: boolean) : Pokemoon
    }

    class ListPokemoon{
        -{static}m_namePokemoonAvailable: String[0..21]
        -{static}m_namePokemoonTaken: String[0..21]
        +{static}creerPoke():
        +{static}toStringStat(): String
        -{static}getRandomIndex(): Integer
        -{static}getPouv(): Pouvoir
        +{static}getName(): String
        +{static}getPoke(): Pokemoon
        +{static}reset():
    }

    class PokeLife{
        -m_pv: Integer
        -m_pvMax: Integer
        -m_protection: Integer
        ~«create»PokeLife(pv: Integer)
        ~getPV(): Integer
        ~getPvMax(): Integer
        ~setProtec(protec: Integer):
        ~takeDamage(attack: Integer): Integer
        –takeHeal(heal: Integer): Integer
    }

    class Pokemoon{
        -m_name: String
        +«create»Pokemoon()
        +«create»Pokemoon(pouv: Pouvoir)
        +toString(): String
        +heal(heal: Integer)
        +setAffinite(type: Element): 
        +noPouvoir(): Pouvoir
        +hasPower(): Boolean
        +newPouvoir()
        +getName(): String
        +getPower(): Integer
        +getLife(): Integer
        +getLifeMax(): Integer
        +getElement(): String
        +getAvantage(): String
        +getDesavantage(): String
        +getPouvoir(): String
        +fight(other: Pokemoon): void
        ~protec(protec: Integer)
        ~increasePower(increase: Integer)
        +utilise(GetPoke cherche, Player joueur): Boolean
    }

    class PokePower{
        -m_power: Integer
        ~«create»PokePower(power: Integer)
        ~getPower(): Integer
        ~getAttackPower(element: Element, elementEnemi: Element): Integer
    }

    class PouvEther extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvFerveurGuerriere extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvKamikaz extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvPlomb extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvResistance extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvSoinSimple extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }

    class PouvSoinTotal extends pouvoir.Pouvoir{
        +«create»PouvEther()
        +utiliser(poke: Pokemoon, other: Pokemoon, joueur: Player):
    }
}

class Main{
    +main(args: String[]):
}

Main .> Deroulement: «instaciate»
Main .> Affichage: «uses»

Affichage o-> "1\nm_scanf"Scanner

Deroulement "1" *---> "-m_user\n1"User : possède >
Deroulement "1" *---> "-m_bot\n1"Player : possède >
Deroulement .>Random : <<uses>>
Deroulement o-> "1\nm_scanf"Scanner
Deroulement .>Affichage : <<uses>>

Deck "1" o---> "-m_pokemoon\n[0..21]"Pokemoon : est constitué de >

Discard "1" o--->"-m_pokemoon\n[0..21]"Pokemoon: contient >

FindPoke "1" o->"-m_joueur\n1"Player: cherche dans >

Hand "1" o--->"-m_pokemoon\n[0..5]" Pokemoon : est constituée de >

Player "1" *---> "-m_deck\n1"Deck : possède >
Player "1" *---> "-m_hand\n1" Hand : possède >
Player "1" *---> "-m_discard\n1" Discard: possède >
Player "1" *---> "-m_playground\n1"Playground : possède >
Player .> Random : «uses»

Playground "3" o---> "-m_pokemoon\n[0..3]"Pokemoon : est constitué de >


ListPokemoon "1" o->"-m_pouvPokeAvailable\n0..8"Pouvoir: est faite de >
ListPokemoon "1" o->"-m_pouvPokeTaken\n0..8"Pouvoir: est faite de >
ListPokemoon "1" o->"-m_PokeAvailable\n0..21"Pokemoon: est faite de >
ListPokemoon "1" o->"-m_PokeAvailable\n0..21"Pokemoon: est faite de >
ListPokemoon .> Random : «uses»

Pokemoon "1" *-> "-m_life\n1"PokeLife : possède >
Pokemoon "1" *-> "-m_powerAtt\n1"PokePower : possède >
Pokemoon "0..*" *-> "-m_affinite\n1"Element : type >
Pokemoon "1" o-> "-m_pouv\n0..1"Pouvoir : possède >
Pokemoon .> Random : «uses»
Pokemoon .> ListPokemoon : <<uses>>
Pokemoon .> partie.FindPoke : «uses»
@enduml